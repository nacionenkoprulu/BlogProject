#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using DataAccess.Contexts;
using DataAccess.Entities;
using Business.Services;
using Business.Models;
using System.Security.Claims;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication;

//Generated by ScaffoldApp.
namespace MVC.Areas.Account.Controllers
{
    [Area("Account")] //must be write!!
    public class UsersController : Controller
    {
        // Add service injections here
        private readonly IAccountService _accountService;

        public UsersController(IAccountService accountService)
        {
            _accountService = accountService;
        }

        // GET: Account/Users/Login
        public IActionResult Login(string returnUrl)
        {
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            AccountLoginModel model = new AccountLoginModel()
            {
                ReturnUrl = returnUrl
            };

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Login(AccountLoginModel model)
        {
            if (ModelState.IsValid)
            {
                UserModel userResultModel = new UserModel();
                var result = _accountService.Login(model, userResultModel);

                if (result.IsSuccessful)
                {
                    List<Claim> claims = new List<Claim>()
                    {
                        new Claim(ClaimTypes.Name, userResultModel.UserName),
                        new Claim(ClaimTypes.Role, userResultModel.Role.Name),
                        new Claim(ClaimTypes.Sid, userResultModel.Id.ToString())
                    };


                    var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

                    var principal = new ClaimsPrincipal(identity);

                    HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal).Wait();


                    if (!string.IsNullOrWhiteSpace(model.ReturnUrl))
                    {
                        return Redirect(model.ReturnUrl);
                    }
                    return RedirectToAction("Index", "Home", new { area = "" });
                }

                ModelState.AddModelError("", result.Message);
            }
          
            return View();
        }


        public IActionResult Logout() //Çıkış
        {
            HttpContext.SignOutAsync(); //Cookie kaldırılır

            return RedirectToAction("Index", "Home", new { area = "" });
        }

        public IActionResult AccessDenied() //Yetkiniz yok sayfası
        {
            return View("_Error", "Access is denied for this page");
        }

        public IActionResult Register()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Register(AccountRegisterModel model) //User Register
        {
            if (ModelState.IsValid)
            {
                var result = _accountService.Register(model);
                if (result.IsSuccessful)
                {
                    TempData["Message"] = result.Message;
                    return RedirectToAction(nameof(Login));
                }
                ModelState.AddModelError("", result.Message);

            }
            return View(model);
        }





	}
}

#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using DataAccess.Contexts;
using DataAccess.Entities;
using Business.Services;
using Business.Models;

//Generated by ScaffoldApp.
namespace MVC.Controllers
{
    public class TagsController : Controller
    {
        // Add service injections here
        private readonly ITagService _tagService;

        public TagsController(ITagService tagService)
        {
            _tagService = tagService;
        }

        // GET: Tags
        public IActionResult Index()
        {
            List<TagModel> tagList = _tagService.GetList();
            return View(tagList);
        }

        // GET: Tags/Details/5
        public IActionResult Details(int id)
        {
            TagModel tag = null; // TODO: Add get item service logic here
            if (tag == null)
            {
                return NotFound();
            }
            return View(tag);
        }

        // GET: Tags/Create
        public IActionResult Create()
        {
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            return View();
        }

        // POST: Tags/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(TagModel tag)
        {
            if (ModelState.IsValid)
            {
                var result = _tagService.Add(tag);
                if (result.IsSuccessful)
                {
                    TempData["Message"] = result.Message;
					return RedirectToAction(nameof(Index));
				}

				ModelState.AddModelError("", result.Message);

			}
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            return View(tag);
        }

        // GET: Tags/Edit/5
        public IActionResult Edit(int id)
        {
            TagModel tag = _tagService.Query().SingleOrDefault(t => t.Id == id);
            if (tag == null)
            {
                return View("_Error", "Tag not found!");
            }
            
            return View(tag);
        }

        // POST: Tags/Edit
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Edit(TagModel tag)
        {
            if (ModelState.IsValid)
            {
                var result = _tagService.Update(tag);

                if (result.IsSuccessful)
                {
                    TempData["Message"] = result.Message;
					return RedirectToAction(nameof(Index));
				}
                ModelState.AddModelError("", result.Message);
            }
            return View(tag);
        }
        public IActionResult Delete(int id)
        {
            var result = _tagService.Delete(id);
            TempData["Message"] = result.Message;
             
            return RedirectToAction(nameof(Index));
        }
	}
}
